/*
 * Project Puerto Rico
 * Copyright (C) 2018  Thomas PÃ¶tzsch, Stephan Stroh
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.eu.leontebbens.gradle:chromedriver-updater-plugin:1.6"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.2.RELEASE")
    }
}

plugins {
    id 'java'
    id 'war'
    id 'idea'
    id 'eclipse'
    id 'checkstyle'
    id 'org.junit.platform.gradle.plugin' version '1.0.1'
    id 'eu.leontebbens.gradle.chromedriver-updater' version '1.6'
    id 'net.ltgt.apt' version '0.10'
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group 'is.surreal.webengineering'
version '0.1-ALPHA'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "http://repo.spring.io/libs-snapshot" }
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
}

dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api")
    testCompile("org.junit.jupiter:junit-jupiter-engine")
    testRuntime("org.junit.jupiter:junit-jupiter-engine")
    testRuntime("org.junit.vintage:junit-vintage-engine:4.12.1")

    compile 'io.cucumber:cucumber-java8:2.1.0'
    compile 'io.cucumber:cucumber-junit:2.1.0'

    compile 'com.google.guava:guava:23.0'

    compile 'org.projectlombok:lombok:1.16.20'

    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.security.oauth:spring-security-oauth2:2.3.2.RELEASE")
    compile("org.springframework.security:spring-security-jwt:1.0.9.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.apache.commons:commons-lang3:3.7")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework:spring-jdbc")
    compile("org.springframework.boot:spring-boot-starter-test") {
        exclude group: 'junit', module: 'junit'
    }
    compile("javax.xml.bind:jaxb-api:2.3.0")
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.44'
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")

    testCompile 'com.h2database:h2:1.4.194'
    testCompile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.7.1'

    apt "org.projectlombok:lombok:1.16.20"
}

war {
    archiveName = "ROOT##${version}.war"
}

node {
    version = '10.1.0'
    npmVersion = '5.6.0'
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
    workDir = file("${project.buildDir}/frontend")
    npmWorkDir = file("${project.buildDir}/frontend/npm")
    nodeModulesDir = file("${project.projectDir}/frontend/node_modules")
}

checkstyle {
    toolVersion = '8.4'
    configFile = new File("config/Checkstyle/google_checks_updated.xml")
}

test {
    systemProperties 'property' : 'value'
}

junitPlatform . enableStandardTestTask true

apply plugin: 'jacoco'
jacoco {
    toolVersion = '0.7.9'
    applyTo junitPlatformTest
}

junitPlatformTest {
    jacoco {
        destinationFile = file ( "${buildDir}/jacoco/test.exec" )
    }
}

ext {
    jacocoExclusions = ['**/Main*']
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclusions)
        })
    }
    reports {
        xml . enabled true
        csv . enabled false
        html . enabled true
    }
}

